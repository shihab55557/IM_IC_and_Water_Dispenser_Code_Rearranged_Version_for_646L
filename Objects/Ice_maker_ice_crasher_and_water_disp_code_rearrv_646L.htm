<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Ice_maker_ice_crasher_and_water_disp_code_rearrv_646L.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Ice_maker_ice_crasher_and_water_disp_code_rearrv_646L.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Tue Dec 31 10:16:03 2024
<BR><P>
<H3>Maximum Stack Usage =        172 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Ice_Maker_Disp_Comm_Based_Ice_Maker_Handler &rArr; Ice_Maker_Disp_Comm_Based_Ice_Maker_Mode &rArr; Ice_Maker_Ice_Making_Operation &rArr; Ice_Maker_Ice_Tray_Rotation_Init &rArr; Timebase_DownCounter_SS_Set_Securely &rArr; Timebase_DownCounter_SS_Start &rArr; Timebase_DownCounter_SS_Set_Status
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[23]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[10]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[f]">DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1a]">I2C1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1b]">I2C2_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[7]">RTC_TAMP_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1c]">SPI1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1d]">SPI2_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[21]">SystemInit</a> from system_stm32g0xx.o(.text.SystemInit) referenced from startup_stm32g070xx.o(.text)
 <LI><a href="#[16]">TIM14_IRQHandler</a> from disp.o(.text.TIM14_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[17]">TIM15_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[18]">TIM16_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[19]">TIM17_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from icemaker.o(.text.TIM1_BRK_UP_TRG_COM_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from timebase.o(.text.TIM3_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[14]">TIM6_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[15]">TIM7_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1e]">USART1_IRQHandler</a> from disp.o(.text.USART1_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1f]">USART2_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[20]">USART3_4_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[22]">__main</a> from __main.o(!!!main) referenced from startup_stm32g070xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(.text)
</UL>
<P><STRONG><a name="[24]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[26]"></a>__scatterload_rt2</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[115]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[116]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[27]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[117]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[118]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[119]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[120]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[121]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[122]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[123]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[124]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[125]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[126]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[127]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[128]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[129]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[12d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[30]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[12f]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[130]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[131]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[132]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[133]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[134]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[135]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[25]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[136]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[28]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2a]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[137]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Ice_Maker_Disp_Comm_Based_Ice_Maker_Handler &rArr; Ice_Maker_Disp_Comm_Based_Ice_Maker_Mode &rArr; Ice_Maker_Ice_Making_Operation &rArr; Ice_Maker_Ice_Tray_Rotation_Init &rArr; Timebase_DownCounter_SS_Set_Securely &rArr; Timebase_DownCounter_SS_Start &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[138]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[35]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[139]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[31]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USART3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Config
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Set_BAUD_Rate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Determine_Digit_Numbers
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Set_BAUD_Rate
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Determine_Digit_Numbers
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Get_Filtered_Value
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Securely
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_idivmod</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Securely
</UL>

<P><STRONG><a name="[13a]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2e]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[13d]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[13e]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[13f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>CRC_CVTE_Block</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, crc.o(.text.CRC_CVTE_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRC_CVTE_Block
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_CRC_Verify
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_HeartBeat_Send
</UL>

<P><STRONG><a name="[36]"></a>Disp_Comm_Handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, disp_comm.o(.text.Disp_Comm_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Disp_Comm_Handler &rArr; Timebase_DownCounter_SS_Set_Forcefully &rArr; Timebase_DownCounter_SS_Set_Securely &rArr; Timebase_DownCounter_SS_Start &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Update_HBUpdate_Byte
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Extract
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_HeartBeat_Send
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Expired_Event
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Forcefully
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>Disp_Comm_HeartBeat_Send</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, disp_comm.o(.text.Disp_Comm_HeartBeat_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Disp_Comm_HeartBeat_Send &rArr; Disp_UART_Tx_Buf &rArr; Disp_UART_Transmit_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CVTE_Block
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_HeartBeat_Set_Crc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_HeartBeat_Set_Fixed_Fields
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Tx_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Handler
</UL>

<P><STRONG><a name="[3e]"></a>Disp_Comm_HeartBeat_Set_Crc</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, disp_comm.o(.text.Disp_Comm_HeartBeat_Set_Crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Disp_Comm_HeartBeat_Set_Crc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_HeartBeat_Send
</UL>

<P><STRONG><a name="[3c]"></a>Disp_Comm_HeartBeat_Set_Fixed_Fields</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, disp_comm.o(.text.Disp_Comm_HeartBeat_Set_Fixed_Fields))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_HeartBeat_Send
</UL>

<P><STRONG><a name="[5c]"></a>Disp_Comm_HeartBeat_Set_PacketID</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, disp_comm.o(.text.Disp_Comm_HeartBeat_Set_PacketID))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Disp_Comm_HeartBeat_Set_PacketID
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Update_HBUpdate_Byte
</UL>

<P><STRONG><a name="[43]"></a>Disp_Comm_HeartBeat_Struct_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, disp_comm.o(.text.Disp_Comm_HeartBeat_Struct_Init))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Init
</UL>

<P><STRONG><a name="[81]"></a>Disp_Comm_Heartbeat_Set_Data</STRONG> (Thumb, 396 bytes, Stack size 12 bytes, disp_comm.o(.text.Disp_Comm_Heartbeat_Set_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Disp_Comm_Heartbeat_Set_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Get_Disp_Comm_Val
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Disp_Comm_Based_Update_NTC_Error_Bit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Disp_Comm_Based_Update_Ice_Container_Full_Status_Bit
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Disp_Comm_Based_Ice_Maker_Mode_Update_For_Heartbeat_Data
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Configure_Window_Feedback
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Disp_Ice_Maker_Valve_On_Off
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Send_IM_Motor_Feedback
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Disp_Ice_Maker_Ice_Tray_Rotation
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Send_Filter_Status
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_Valve_Control
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Water_Level_Selection
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_DeLED_Control
</UL>

<P><STRONG><a name="[40]"></a>Disp_Comm_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, disp_comm.o(.text.Disp_Comm_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Disp_Comm_Init &rArr; Timebase_DownCounter_SS_Set_Forcefully &rArr; Timebase_DownCounter_SS_Set_Securely &rArr; Timebase_DownCounter_SS_Start &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Struct_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_HeartBeat_Struct_Init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Variable_Init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Forcefully
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>Disp_Comm_Master_Data_CRC_Stat</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, disp_comm.o(.text.Disp_Comm_Master_Data_CRC_Stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Disp_Comm_Master_Data_CRC_Stat
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_Received_Crc
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_Calculated_Crc
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Master_Rec_Data
</UL>

<P><STRONG><a name="[47]"></a>Disp_Comm_Master_Data_CRC_Verify</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, disp_comm.o(.text.Disp_Comm_Master_Data_CRC_Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Disp_Comm_Master_Data_CRC_Verify &rArr; Disp_UART_Data_Copy_Buf &rArr; Disp_UART_Get_Data_Len
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_CVTE_Block
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Data_Copy_Buf
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Clear_Data_Available_Flag
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Flush_Buf
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Get_Data_Len
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Data_Available
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Extract
</UL>

<P><STRONG><a name="[37]"></a>Disp_Comm_Master_Data_Extract</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, disp_comm.o(.text.Disp_Comm_Master_Data_Extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Disp_Comm_Master_Data_Extract &rArr; Disp_Comm_Master_Data_CRC_Verify &rArr; Disp_UART_Data_Copy_Buf &rArr; Disp_UART_Get_Data_Len
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_CRC_Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Handler
</UL>

<P><STRONG><a name="[45]"></a>Disp_Comm_Master_Data_Get_Calculated_Crc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, disp_comm.o(.text.Disp_Comm_Master_Data_Get_Calculated_Crc))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_CRC_Stat
</UL>

<P><STRONG><a name="[55]"></a>Disp_Comm_Master_Data_Get_Header</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, disp_comm.o(.text.Disp_Comm_Master_Data_Get_Header))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Master_Rec_Data
</UL>

<P><STRONG><a name="[5b]"></a>Disp_Comm_Master_Data_Get_IMValveOnCycle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, disp_comm.o(.text.Disp_Comm_Master_Data_Get_IMValveOnCycle))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Master_Rec_Data
</UL>

<P><STRONG><a name="[5a]"></a>Disp_Comm_Master_Data_Get_IMValveOnTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, disp_comm.o(.text.Disp_Comm_Master_Data_Get_IMValveOnTime))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Master_Rec_Data
</UL>

<P><STRONG><a name="[59]"></a>Disp_Comm_Master_Data_Get_IceMaker</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, disp_comm.o(.text.Disp_Comm_Master_Data_Get_IceMaker))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Master_Rec_Data
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Get_Disp_Comm_Val
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Disp_Ice_Maker_Valve_On_Off
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Disp_Ice_Maker_Ice_Tray_Rotation
</UL>

<P><STRONG><a name="[56]"></a>Disp_Comm_Master_Data_Get_Length</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, disp_comm.o(.text.Disp_Comm_Master_Data_Get_Length))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Master_Rec_Data
</UL>

<P><STRONG><a name="[57]"></a>Disp_Comm_Master_Data_Get_Mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, disp_comm.o(.text.Disp_Comm_Master_Data_Get_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Update_HBUpdate_Byte
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Master_Rec_Data
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Disp_Comm_Based_Ice_Maker_Mode
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Disp_Comm_Based_Ice_Maker_Mode_Update_For_Heartbeat_Data
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Configure_Window_Feedback
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_User_in_Configuration_Window
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Disp_Ice_Maker_Valve_On_Off
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Disp_Ice_Maker_Ice_Tray_Rotation
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_Valve_Control
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Water_Level_Selection
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Command
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_DeLED_Control
</UL>

<P><STRONG><a name="[46]"></a>Disp_Comm_Master_Data_Get_Received_Crc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, disp_comm.o(.text.Disp_Comm_Master_Data_Get_Received_Crc))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_CRC_Stat
</UL>

<P><STRONG><a name="[58]"></a>Disp_Comm_Master_Data_Get_WaterDispenser</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, disp_comm.o(.text.Disp_Comm_Master_Data_Get_WaterDispenser))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Master_Rec_Data
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Water_Level_Selection
</UL>

<P><STRONG><a name="[42]"></a>Disp_Comm_Master_Data_Struct_Init</STRONG> (Thumb, 100 bytes, Stack size 4 bytes, disp_comm.o(.text.Disp_Comm_Master_Data_Struct_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Disp_Comm_Master_Data_Struct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Init
</UL>

<P><STRONG><a name="[4d]"></a>Disp_Comm_Print_Heartbeat_Send_Data</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, disp_comm.o(.text.Disp_Comm_Print_Heartbeat_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Disp_Comm_Print_Heartbeat_Send_Data &rArr; UART_PrintfD_NL &rArr; UART_Transmit_Number &rArr; UART_Determine_Digit_Numbers
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Inc_Curr_Thread
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Inc_Thread_Function
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Get_Curr_Thread
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Get_Thread_Function
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Get_Start_Flag
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PrintfD_NL
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_All_Debug_Data
</UL>

<P><STRONG><a name="[54]"></a>Disp_Comm_Print_Master_Rec_Data</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, disp_comm.o(.text.Disp_Comm_Print_Master_Rec_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Disp_Comm_Print_Master_Rec_Data &rArr; UART_PrintfD_NL &rArr; UART_Transmit_Number &rArr; UART_Determine_Digit_Numbers
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_IMValveOnCycle
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_IMValveOnTime
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_IceMaker
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_WaterDispenser
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_Length
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_Header
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_CRC_Stat
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_Mode
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Inc_Curr_Thread
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Inc_Thread_Function
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Get_Curr_Thread
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Get_Thread_Function
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Get_Start_Flag
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PrintfD_NL
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_All_Debug_Data
</UL>

<P><STRONG><a name="[39]"></a>Disp_Comm_Update_HBUpdate_Byte</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, disp_comm.o(.text.Disp_Comm_Update_HBUpdate_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Disp_Comm_Update_HBUpdate_Byte &rArr; Disp_Comm_HeartBeat_Set_PacketID
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_HeartBeat_Set_PacketID
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Handler
</UL>

<P><STRONG><a name="[41]"></a>Disp_Comm_Variable_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, disp_comm.o(.text.Disp_Comm_Variable_Init))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Init
</UL>

<P><STRONG><a name="[f7]"></a>Disp_Config_Ice_Tray_on_User_Config_Rotation</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, user_config.o(.text.Disp_Config_Ice_Tray_on_User_Config_Rotation))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_User_In_Configuration_Mode
</UL>

<P><STRONG><a name="[49]"></a>Disp_UART_Clear_Data_Available_Flag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, disp.o(.text.Disp_UART_Clear_Data_Available_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_CRC_Verify
</UL>

<P><STRONG><a name="[63]"></a>Disp_UART_Clock_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, disp.o(.text.Disp_UART_Clock_Init))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Init
</UL>

<P><STRONG><a name="[f0]"></a>Disp_UART_Counter_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, disp.o(.text.Disp_UART_Counter_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[48]"></a>Disp_UART_Data_Available</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, disp.o(.text.Disp_UART_Data_Available))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_CRC_Verify
</UL>

<P><STRONG><a name="[4a]"></a>Disp_UART_Data_Copy_Buf</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, disp.o(.text.Disp_UART_Data_Copy_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Disp_UART_Data_Copy_Buf &rArr; Disp_UART_Get_Data_Len
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Get_Buf
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Get_Data_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_CRC_Verify
</UL>

<P><STRONG><a name="[4c]"></a>Disp_UART_Flush_Buf</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, disp.o(.text.Disp_UART_Flush_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Disp_UART_Flush_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_CRC_Verify
</UL>

<P><STRONG><a name="[62]"></a>Disp_UART_GPIO_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, disp.o(.text.Disp_UART_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Disp_UART_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Init
</UL>

<P><STRONG><a name="[5d]"></a>Disp_UART_Get_Buf</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, disp.o(.text.Disp_UART_Get_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Disp_UART_Get_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Data_Copy_Buf
</UL>

<P><STRONG><a name="[5e]"></a>Disp_UART_Get_Buf_Index</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, disp.o(.text.Disp_UART_Get_Buf_Index))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Get_Data_Len
</UL>

<P><STRONG><a name="[4b]"></a>Disp_UART_Get_Data_Len</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, disp.o(.text.Disp_UART_Get_Data_Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Disp_UART_Get_Data_Len
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Get_Buf_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_CRC_Verify
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Data_Copy_Buf
</UL>

<P><STRONG><a name="[5f]"></a>Disp_UART_Init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, disp.o(.text.Disp_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Disp_UART_Init &rArr; Disp_UART_Timer_Init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Timer_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_RX_Int_Config
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_RX_Config
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_TX_Config
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Set_BAUD_Rate
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Clock_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_GPIO_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Struct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>Disp_UART_RX_Config</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, disp.o(.text.Disp_UART_RX_Config))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Init
</UL>

<P><STRONG><a name="[67]"></a>Disp_UART_RX_Int_Config</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, disp.o(.text.Disp_UART_RX_Int_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Disp_UART_RX_Int_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Init
</UL>

<P><STRONG><a name="[64]"></a>Disp_UART_Set_BAUD_Rate</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, disp.o(.text.Disp_UART_Set_BAUD_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Disp_UART_Set_BAUD_Rate
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Init
</UL>

<P><STRONG><a name="[60]"></a>Disp_UART_Struct_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, disp.o(.text.Disp_UART_Struct_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Disp_UART_Struct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Init
</UL>

<P><STRONG><a name="[65]"></a>Disp_UART_TX_Config</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, disp.o(.text.Disp_UART_TX_Config))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Init
</UL>

<P><STRONG><a name="[ad]"></a>Disp_UART_Timer_Disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, disp.o(.text.Disp_UART_Timer_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>Disp_UART_Timer_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, disp.o(.text.Disp_UART_Timer_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>Disp_UART_Timer_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, disp.o(.text.Disp_UART_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Disp_UART_Timer_Init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Init
</UL>

<P><STRONG><a name="[6b]"></a>Disp_UART_Transmit_Byte</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, disp.o(.text.Disp_UART_Transmit_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Disp_UART_Transmit_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Tx_Buf
</UL>

<P><STRONG><a name="[3f]"></a>Disp_UART_Tx_Buf</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, disp.o(.text.Disp_UART_Tx_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Disp_UART_Tx_Buf &rArr; Disp_UART_Transmit_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Transmit_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_HeartBeat_Send
</UL>

<P><STRONG><a name="[9a]"></a>GET_ICE_MAKER_AFTER_VALVE_TIME</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, parameter.o(.text.GET_ICE_MAKER_AFTER_VALVE_TIME))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Valve_Config
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_UP_TRG_COM_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>GET_ICE_MAKER_HEATER_RUN_TIME</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, parameter.o(.text.GET_ICE_MAKER_HEATER_RUN_TIME))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Time_Based_Heater_Config
</UL>

<P><STRONG><a name="[87]"></a>GET_ICE_MAKER_IC_FULL_WAIT_TIME</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, parameter.o(.text.GET_ICE_MAKER_IC_FULL_WAIT_TIME))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Making_Operation
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_UP_TRG_COM_IRQHandler
</UL>

<P><STRONG><a name="[84]"></a>GET_ICE_MAKER_SET_ICE_TEMP</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, parameter.o(.text.GET_ICE_MAKER_SET_ICE_TEMP))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Making_Operation
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Temp_Check
</UL>

<P><STRONG><a name="[98]"></a>GET_ICE_MAKER_VALVE_OFF_TIME</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, parameter.o(.text.GET_ICE_MAKER_VALVE_OFF_TIME))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Valve_Config
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_UP_TRG_COM_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>GET_ICE_MAKER_VALVE_ON_CYCLE</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, parameter.o(.text.GET_ICE_MAKER_VALVE_ON_CYCLE))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Valve_Config
</UL>

<P><STRONG><a name="[96]"></a>GET_ICE_MAKER_VALVE_ON_TIME</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, parameter.o(.text.GET_ICE_MAKER_VALVE_ON_TIME))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Valve_Config
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_UP_TRG_COM_IRQHandler
</UL>

<P><STRONG><a name="[109]"></a>GET_WATER_DISPENSER_LOW_WATER_FILL_TIME_SEC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, parameter.o(.text.GET_WATER_DISPENSER_LOW_WATER_FILL_TIME_SEC))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_Valve_Control
</UL>

<P><STRONG><a name="[107]"></a>GET_WATER_DISPENSER_MID_WATER_FILL_TIME_SEC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, parameter.o(.text.GET_WATER_DISPENSER_MID_WATER_FILL_TIME_SEC))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_Valve_Control
</UL>

<P><STRONG><a name="[aa]"></a>GlobalVars_Clear_Start_Flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glvars.o(.text.GlobalVars_Clear_Start_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_All_Debug_Data
</UL>

<P><STRONG><a name="[50]"></a>GlobalVars_Get_Curr_Thread</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glvars.o(.text.GlobalVars_Get_Curr_Thread))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Master_Rec_Data
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Heartbeat_Send_Data
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Debug_Data
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_All_Debug_Data
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Debug_Data
</UL>

<P><STRONG><a name="[4e]"></a>GlobalVars_Get_Start_Flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glvars.o(.text.GlobalVars_Get_Start_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Master_Rec_Data
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Heartbeat_Send_Data
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Debug_Data
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_All_Debug_Data
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Debug_Data
</UL>

<P><STRONG><a name="[4f]"></a>GlobalVars_Get_Thread_Function</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glvars.o(.text.GlobalVars_Get_Thread_Function))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Master_Rec_Data
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Heartbeat_Send_Data
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Debug_Data
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_All_Debug_Data
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Debug_Data
</UL>

<P><STRONG><a name="[53]"></a>GlobalVars_Inc_Curr_Thread</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, glvars.o(.text.GlobalVars_Inc_Curr_Thread))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Master_Rec_Data
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Heartbeat_Send_Data
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Debug_Data
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_All_Debug_Data
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Debug_Data
</UL>

<P><STRONG><a name="[52]"></a>GlobalVars_Inc_Thread_Function</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, glvars.o(.text.GlobalVars_Inc_Thread_Function))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Master_Rec_Data
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Heartbeat_Send_Data
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Debug_Data
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Debug_Data
</UL>

<P><STRONG><a name="[ab]"></a>GlobalVars_Reset_Curr_Thread</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glvars.o(.text.GlobalVars_Reset_Curr_Thread))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_All_Debug_Data
</UL>

<P><STRONG><a name="[ac]"></a>GlobalVars_Reset_Thread_Function</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glvars.o(.text.GlobalVars_Reset_Thread_Function))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_All_Debug_Data
</UL>

<P><STRONG><a name="[112]"></a>GlobalVars_Set_Start_Flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, glvars.o(.text.GlobalVars_Set_Start_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>Ice_Maker_CCW_End_Detection</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, icemaker.o(.text.Ice_Maker_CCW_End_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Ice_Maker_CCW_End_Detection &rArr; Ice_Maker_Hall_Feedback_checker
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Hall_Feedback_checker
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Config_Rotation
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_Rotation_Init
</UL>

<P><STRONG><a name="[6e]"></a>Ice_Maker_Config_Rotation</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, icemaker.o(.text.Ice_Maker_Config_Rotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Ice_Maker_Config_Rotation &rArr; Timebase_DownCounter_SS_Set_Securely &rArr; Timebase_DownCounter_SS_Start &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Init_Rotation_Reset
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Securely
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_CCW_End_Detection
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Reset_Hall_Feedback
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Hall_Feedback_Checker_RT
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Motor_Control
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Expired_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Disp_Ice_Maker_Ice_Tray_Rotation
</UL>

<P><STRONG><a name="[74]"></a>Ice_Maker_Debug_Data</STRONG> (Thumb, 536 bytes, Stack size 8 bytes, icemaker.o(.text.Ice_Maker_Debug_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Ice_Maker_Debug_Data &rArr; UART_PrintfD_NL &rArr; UART_Transmit_Number &rArr; UART_Determine_Digit_Numbers
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Inc_Curr_Thread
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Inc_Thread_Function
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Get_Curr_Thread
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Get_Thread_Function
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Get_Start_Flag
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Test_Button
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Hall_Feedback_Checker_RT
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Hall_Feedback_checker
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PrintfD_NL
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_All_Debug_Data
</UL>

<P><STRONG><a name="[76]"></a>Ice_Maker_Disp_Comm_Based_Ice_Maker_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, icemaker.o(.text.Ice_Maker_Disp_Comm_Based_Ice_Maker_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Ice_Maker_Disp_Comm_Based_Ice_Maker_Handler &rArr; Ice_Maker_Disp_Comm_Based_Ice_Maker_Mode &rArr; Ice_Maker_Ice_Making_Operation &rArr; Ice_Maker_Ice_Tray_Rotation_Init &rArr; Timebase_DownCounter_SS_Set_Securely &rArr; Timebase_DownCounter_SS_Start &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Get_Disp_Comm_Val
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Ice_Maker_Handler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Disp_Comm_Based_Update_NTC_Error_Bit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Disp_Comm_Based_Update_Ice_Container_Full_Status_Bit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Disp_Comm_Based_Ice_Maker_Mode
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Disp_Comm_Based_Ice_Maker_Mode_Update_For_Heartbeat_Data
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Get_Temperature_Value
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Time_Based_Heater_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>Ice_Maker_Disp_Comm_Based_Ice_Maker_Mode</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, icemaker.o(.text.Ice_Maker_Disp_Comm_Based_Ice_Maker_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Ice_Maker_Disp_Comm_Based_Ice_Maker_Mode &rArr; Ice_Maker_Ice_Making_Operation &rArr; Ice_Maker_Ice_Tray_Rotation_Init &rArr; Timebase_DownCounter_SS_Set_Securely &rArr; Timebase_DownCounter_SS_Start &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_IM_On_Operation
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_Mode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Making_Operation
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Disp_Comm_Based_Ice_Maker_Handler
</UL>

<P><STRONG><a name="[7c]"></a>Ice_Maker_Disp_Comm_Based_Ice_Maker_Mode_Update_For_Heartbeat_Data</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, icemaker.o(.text.Ice_Maker_Disp_Comm_Based_Ice_Maker_Mode_Update_For_Heartbeat_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Ice_Maker_Disp_Comm_Based_Ice_Maker_Mode_Update_For_Heartbeat_Data &rArr; Disp_Comm_Heartbeat_Set_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Heartbeat_Set_Data
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Disp_Comm_Based_Ice_Maker_Handler
</UL>

<P><STRONG><a name="[7e]"></a>Ice_Maker_Disp_Comm_Based_Update_Ice_Container_Full_Status_Bit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, icemaker.o(.text.Ice_Maker_Disp_Comm_Based_Update_Ice_Container_Full_Status_Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Ice_Maker_Disp_Comm_Based_Update_Ice_Container_Full_Status_Bit &rArr; Disp_Comm_Heartbeat_Set_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Heartbeat_Set_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Disp_Comm_Based_Ice_Maker_Handler
</UL>

<P><STRONG><a name="[7b]"></a>Ice_Maker_Disp_Comm_Based_Update_NTC_Error_Bit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, icemaker.o(.text.Ice_Maker_Disp_Comm_Based_Update_NTC_Error_Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Ice_Maker_Disp_Comm_Based_Update_NTC_Error_Bit &rArr; Disp_Comm_Heartbeat_Set_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Heartbeat_Set_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Disp_Comm_Based_Ice_Maker_Handler
</UL>

<P><STRONG><a name="[79]"></a>Ice_Maker_Get_Temperature_Value</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, icemaker.o(.text.Ice_Maker_Get_Temperature_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Ice_Maker_Get_Temperature_Value &rArr; NTC_Calculate_Single_Sample &rArr; LPF_Get_Filtered_Value &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Get_Temperature
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Calculate_Single_Sample
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Disp_Comm_Based_Ice_Maker_Handler
</UL>

<P><STRONG><a name="[70]"></a>Ice_Maker_Hall_Feedback_Checker_RT</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, icemaker.o(.text.Ice_Maker_Hall_Feedback_Checker_RT))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Debug_Data
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_Rotation
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Config_Rotation
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_Rotation_Init
</UL>

<P><STRONG><a name="[6d]"></a>Ice_Maker_Hall_Feedback_checker</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, icemaker.o(.text.Ice_Maker_Hall_Feedback_checker))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Ice_Maker_Hall_Feedback_checker
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Debug_Data
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_CCW_End_Detection
</UL>

<P><STRONG><a name="[7f]"></a>Ice_Maker_IM_On_Operation</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, icemaker.o(.text.Ice_Maker_IM_On_Operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Ice_Maker_IM_On_Operation
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Disp_Comm_Based_Ice_Maker_Mode
</UL>

<P><STRONG><a name="[90]"></a>Ice_Maker_IM_Struct_Init</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, icemaker.o(.text.Ice_Maker_IM_Struct_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Init
</UL>

<P><STRONG><a name="[80]"></a>Ice_Maker_Ice_Making_Operation</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, icemaker.o(.text.Ice_Maker_Ice_Making_Operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Ice_Maker_Ice_Making_Operation &rArr; Ice_Maker_Ice_Tray_Rotation_Init &rArr; Timebase_DownCounter_SS_Set_Securely &rArr; Timebase_DownCounter_SS_Start &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_User_In_Configuration_Mode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Valve_on_User_Config
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_Rotation
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_On_Config_Rotation
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_Rotation_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Test_Button
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ICE_MAKER_SET_ICE_TEMP
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Temp_Check
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Valve_Config
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ICE_MAKER_IC_FULL_WAIT_TIME
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Disp_Comm_Based_Ice_Maker_Mode
</UL>

<P><STRONG><a name="[88]"></a>Ice_Maker_Ice_Temp_Check</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, icemaker.o(.text.Ice_Maker_Ice_Temp_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ice_Maker_Ice_Temp_Check
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ICE_MAKER_SET_ICE_TEMP
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Making_Operation
</UL>

<P><STRONG><a name="[8a]"></a>Ice_Maker_Ice_Tray_On_Config_Rotation</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icemaker.o(.text.Ice_Maker_Ice_Tray_On_Config_Rotation))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Making_Operation
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Disp_Ice_Maker_Valve_On_Off
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Send_IM_Motor_Feedback
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Disp_Ice_Maker_Ice_Tray_Rotation
</UL>

<P><STRONG><a name="[f4]"></a>Ice_Maker_Ice_Tray_On_Operation</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, icemaker.o(.text.Ice_Maker_Ice_Tray_On_Operation))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Disp_Ice_Maker_Valve_On_Off
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Send_IM_Motor_Feedback
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Disp_Ice_Maker_Ice_Tray_Rotation
</UL>

<P><STRONG><a name="[89]"></a>Ice_Maker_Ice_Tray_Rotation</STRONG> (Thumb, 500 bytes, Stack size 24 bytes, icemaker.o(.text.Ice_Maker_Ice_Tray_Rotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Ice_Maker_Ice_Tray_Rotation &rArr; Timebase_DownCounter_SS_Set_Securely &rArr; Timebase_DownCounter_SS_Start &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Reset_All_Parmaeters
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Securely
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Reset_Hall_Feedback
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Hall_Feedback_Checker_RT
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Motor_Control
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Expired_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Making_Operation
</UL>

<P><STRONG><a name="[85]"></a>Ice_Maker_Ice_Tray_Rotation_Init</STRONG> (Thumb, 492 bytes, Stack size 32 bytes, icemaker.o(.text.Ice_Maker_Ice_Tray_Rotation_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Ice_Maker_Ice_Tray_Rotation_Init &rArr; Timebase_DownCounter_SS_Set_Securely &rArr; Timebase_DownCounter_SS_Start &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Init_Rotation_Reset
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Securely
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_CCW_End_Detection
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Reset_Hall_Feedback
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Hall_Feedback_Checker_RT
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Motor_Control
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Expired_Event
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Making_Operation
</UL>

<P><STRONG><a name="[8e]"></a>Ice_Maker_Init</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, icemaker.o(.text.Ice_Maker_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Ice_Maker_Init &rArr; NTC_Sensor_Init &rArr; NTC_Sensor_ADC_Init &rArr; Timebase_Timer_Delay_SubSeconds
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Sensor_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_IM_Struct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>Ice_Maker_Init_Rotation_Reset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, icemaker.o(.text.Ice_Maker_Init_Rotation_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Config_Rotation
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Reset_All_Parameter
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_Rotation_Init
</UL>

<P><STRONG><a name="[93]"></a>Ice_Maker_Module_Flag_Reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, icemaker.o(.text.Ice_Maker_Module_Flag_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Reset_All_Parameter
</UL>

<P><STRONG><a name="[6f]"></a>Ice_Maker_Motor_Control</STRONG> (Thumb, 124 bytes, Stack size 4 bytes, icemaker.o(.text.Ice_Maker_Motor_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Ice_Maker_Motor_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_Rotation
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Config_Rotation
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_Rotation_Init
</UL>

<P><STRONG><a name="[92]"></a>Ice_Maker_Reset_All_Parameter</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, icemaker.o(.text.Ice_Maker_Reset_All_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Ice_Maker_Reset_All_Parameter &rArr; Ice_Maker_Reset_All_Parmaeters
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Module_Flag_Reset
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Init_Rotation_Reset
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Reset_All_Parmaeters
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Valve_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Disp_Ice_Maker_Ice_Tray_Rotation
</UL>

<P><STRONG><a name="[8d]"></a>Ice_Maker_Reset_All_Parmaeters</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, icemaker.o(.text.Ice_Maker_Reset_All_Parmaeters))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ice_Maker_Reset_All_Parmaeters
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_Rotation
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Reset_All_Parameter
</UL>

<P><STRONG><a name="[71]"></a>Ice_Maker_Reset_Hall_Feedback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, icemaker.o(.text.Ice_Maker_Reset_Hall_Feedback))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_Rotation
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Config_Rotation
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_Rotation_Init
</UL>

<P><STRONG><a name="[75]"></a>Ice_Maker_Test_Button</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, icemaker.o(.text.Ice_Maker_Test_Button))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Making_Operation
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Debug_Data
</UL>

<P><STRONG><a name="[7a]"></a>Ice_Maker_Time_Based_Heater_Config</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, icemaker.o(.text.Ice_Maker_Time_Based_Heater_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ice_Maker_Time_Based_Heater_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ICE_MAKER_HEATER_RUN_TIME
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Disp_Comm_Based_Ice_Maker_Handler
</UL>

<P><STRONG><a name="[86]"></a>Ice_Maker_Valve_Config</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, icemaker.o(.text.Ice_Maker_Valve_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Ice_Maker_Valve_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ICE_MAKER_VALVE_ON_CYCLE
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Valve_Off
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Valve_On
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ICE_MAKER_AFTER_VALVE_TIME
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ICE_MAKER_VALVE_OFF_TIME
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ICE_MAKER_VALVE_ON_TIME
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Making_Operation
</UL>

<P><STRONG><a name="[94]"></a>Ice_Maker_Valve_Off</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, icemaker.o(.text.Ice_Maker_Valve_Off))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Reset_All_Parameter
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Valve_Config
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Disp_Ice_Maker_Valve_On_Off
</UL>

<P><STRONG><a name="[97]"></a>Ice_Maker_Valve_On</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, icemaker.o(.text.Ice_Maker_Valve_On))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Valve_Config
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Disp_Ice_Maker_Valve_On_Off
</UL>

<P><STRONG><a name="[9c]"></a>LPF_Get_Alpha</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, iirlpf.o(.text.LPF_Get_Alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LPF_Get_Alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Get_Filtered_Value
</UL>

<P><STRONG><a name="[9b]"></a>LPF_Get_Filtered_Value</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, iirlpf.o(.text.LPF_Get_Filtered_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LPF_Get_Filtered_Value &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Get_Alpha
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Calculate_Single_Sample
</UL>

<P><STRONG><a name="[9e]"></a>LPF_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, iirlpf.o(.text.LPF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LPF_Init &rArr; LPF_Struct_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Struct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Sensor_Init
</UL>

<P><STRONG><a name="[a5]"></a>LPF_Set_Alpha</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, iirlpf.o(.text.LPF_Set_Alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LPF_Set_Alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Sensor_Init
</UL>

<P><STRONG><a name="[9f]"></a>LPF_Struct_Init</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, iirlpf.o(.text.LPF_Struct_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LPF_Struct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Init
</UL>

<P><STRONG><a name="[82]"></a>NTC_Calculate_Single_Sample</STRONG> (Thumb, 644 bytes, Stack size 24 bytes, ntc.o(.text.NTC_Calculate_Single_Sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NTC_Calculate_Single_Sample &rArr; LPF_Get_Filtered_Value &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Get_Filtered_Value
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Sensor_Reading
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Get_Temperature_Value
</UL>

<P><STRONG><a name="[83]"></a>NTC_Get_Temperature</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, ntc.o(.text.NTC_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NTC_Get_Temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Get_Temperature_Value
</UL>

<P><STRONG><a name="[a1]"></a>NTC_Sensor_ADC_Init</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, ntc.o(.text.NTC_Sensor_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NTC_Sensor_ADC_Init &rArr; Timebase_Timer_Delay_SubSeconds
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Delay_SubSeconds
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Sensor_Init
</UL>

<P><STRONG><a name="[a4]"></a>NTC_Sensor_GPIO_Init</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ntc.o(.text.NTC_Sensor_GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Sensor_Init
</UL>

<P><STRONG><a name="[8f]"></a>NTC_Sensor_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ntc.o(.text.NTC_Sensor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NTC_Sensor_Init &rArr; NTC_Sensor_ADC_Init &rArr; Timebase_Timer_Delay_SubSeconds
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Set_Alpha
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Sensor_ADC_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Sensor_GPIO_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Struct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Init
</UL>

<P><STRONG><a name="[a0]"></a>NTC_Sensor_Reading</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ntc.o(.text.NTC_Sensor_Reading))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NTC_Sensor_Reading &rArr; Read_ADC
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ADC
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Calculate_Single_Sample
</UL>

<P><STRONG><a name="[a3]"></a>NTC_Struct_Init</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, ntc.o(.text.NTC_Struct_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NTC_Struct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Sensor_Init
</UL>

<P><STRONG><a name="[78]"></a>Parameter_Get_Disp_Comm_Val</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, parameter.o(.text.Parameter_Get_Disp_Comm_Val))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Parameter_Get_Disp_Comm_Val &rArr; Disp_Comm_Heartbeat_Set_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_IceMaker
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Heartbeat_Set_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Disp_Comm_Based_Ice_Maker_Handler
</UL>

<P><STRONG><a name="[91]"></a>Parameter_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, parameter.o(.text.Parameter_Init))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Init
</UL>

<P><STRONG><a name="[a7]"></a>Print_All_Debug_Data</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, debug_parameter.o(.text.Print_All_Debug_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Print_All_Debug_Data &rArr; Disp_Comm_Print_Master_Rec_Data &rArr; UART_PrintfD_NL &rArr; UART_Transmit_Number &rArr; UART_Determine_Digit_Numbers
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Master_Rec_Data
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Heartbeat_Send_Data
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Inc_Curr_Thread
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Get_Curr_Thread
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Get_Thread_Function
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Get_Start_Flag
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Debug_Data
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PrintfNL
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Reset_Thread_Function
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Reset_Curr_Thread
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Clear_Start_Flag
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Debug_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>Read_ADC</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ntc.o(.text.Read_ADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Read_ADC
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Sensor_Reading
</UL>

<P><STRONG><a name="[21]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32g0xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(.text)
</UL>
<P><STRONG><a name="[16]"></a>TIM14_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, disp.o(.text.TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM14_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Get_Buf_Index
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Timer_Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, icemaker.o(.text.TIM1_BRK_UP_TRG_COM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM1_BRK_UP_TRG_COM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ICE_MAKER_IC_FULL_WAIT_TIME
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ICE_MAKER_AFTER_VALVE_TIME
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ICE_MAKER_VALVE_OFF_TIME
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_ICE_MAKER_VALVE_ON_TIME
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timebase.o(.text.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler &rArr; Timebase_ISR_Executables
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_ISR_Executables
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>Timebase_Atomic_Operation_End</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timebase.o(.text.Timebase_Atomic_Operation_End))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Sync_With_Shadow_Variables
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Delay_SubSeconds
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Window_Timer_Start
</UL>

<P><STRONG><a name="[e0]"></a>Timebase_Atomic_Operation_Start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timebase.o(.text.Timebase_Atomic_Operation_Start))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Sync_With_Shadow_Variables
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Delay_SubSeconds
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Window_Timer_Start
</UL>

<P><STRONG><a name="[af]"></a>Timebase_DownCounter_Clear_All_Flags</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_DownCounter_Clear_All_Flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Timebase_DownCounter_Clear_All_Flags &rArr; Timebase_DownCounter_Reset &rArr; Timebase_DownCounter_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Expired_Event
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Send_Filter_Status
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_Valve_Control
</UL>

<P><STRONG><a name="[b6]"></a>Timebase_DownCounter_Clear_Period_Flag</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, timebase.o(.text.Timebase_DownCounter_Clear_Period_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Timebase_DownCounter_Clear_Period_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Reset
</UL>

<P><STRONG><a name="[b1]"></a>Timebase_DownCounter_Expired_Event</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_DownCounter_Expired_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Timebase_DownCounter_Expired_Event &rArr; Timebase_DownCounter_Clear_All_Flags &rArr; Timebase_DownCounter_Reset &rArr; Timebase_DownCounter_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Clear_All_Flags
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Get_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Send_Filter_Status
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_Valve_Control
</UL>

<P><STRONG><a name="[d5]"></a>Timebase_DownCounter_Get_EndValue</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, timebase.o(.text.Timebase_DownCounter_Get_EndValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Timebase_DownCounter_Get_EndValue
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Update
</UL>

<P><STRONG><a name="[b2]"></a>Timebase_DownCounter_Get_Status</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, timebase.o(.text.Timebase_DownCounter_Get_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Timebase_DownCounter_Get_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Expired_Event
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Update
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_Securely
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Start
</UL>

<P><STRONG><a name="[d6]"></a>Timebase_DownCounter_Get_Value</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, timebase.o(.text.Timebase_DownCounter_Get_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Timebase_DownCounter_Get_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Update
</UL>

<P><STRONG><a name="[b0]"></a>Timebase_DownCounter_Reset</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, timebase.o(.text.Timebase_DownCounter_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Timebase_DownCounter_Reset &rArr; Timebase_DownCounter_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Clear_Period_Flag
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_EndValue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_Value
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Reset_All
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Update
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Clear_All_Flags
</UL>

<P><STRONG><a name="[b7]"></a>Timebase_DownCounter_Reset_All</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_DownCounter_Reset_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Timebase_DownCounter_Reset_All &rArr; Timebase_DownCounter_Reset &rArr; Timebase_DownCounter_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Reset
</UL>

<P><STRONG><a name="[b8]"></a>Timebase_DownCounter_SS_Clear_All_Flags</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_DownCounter_SS_Clear_All_Flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Timebase_DownCounter_SS_Clear_All_Flags &rArr; Timebase_DownCounter_SS_Reset &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Expired_Event
</UL>

<P><STRONG><a name="[c1]"></a>Timebase_DownCounter_SS_Clear_Period_Flag</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, timebase.o(.text.Timebase_DownCounter_SS_Clear_Period_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Timebase_DownCounter_SS_Clear_Period_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Period_Value_Expired_Event
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Reset
</UL>

<P><STRONG><a name="[38]"></a>Timebase_DownCounter_SS_Expired_Event</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_DownCounter_SS_Expired_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Timebase_DownCounter_SS_Expired_Event &rArr; Timebase_DownCounter_SS_Clear_All_Flags &rArr; Timebase_DownCounter_SS_Reset &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Clear_All_Flags
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Get_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_Rotation
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Config_Rotation
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_Rotation_Init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Handler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_DeLED_Control
</UL>

<P><STRONG><a name="[d0]"></a>Timebase_DownCounter_SS_Get_EndValueSec</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, timebase.o(.text.Timebase_DownCounter_SS_Get_EndValueSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Timebase_DownCounter_SS_Get_EndValueSec
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update
</UL>

<P><STRONG><a name="[cf]"></a>Timebase_DownCounter_SS_Get_EndValueSubSec</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, timebase.o(.text.Timebase_DownCounter_SS_Get_EndValueSubSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Timebase_DownCounter_SS_Get_EndValueSubSec
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update
</UL>

<P><STRONG><a name="[bd]"></a>Timebase_DownCounter_SS_Get_PeriodValue</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, timebase.o(.text.Timebase_DownCounter_SS_Get_PeriodValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Timebase_DownCounter_SS_Get_PeriodValue
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Get_Remaining_Period_Value
</UL>

<P><STRONG><a name="[bf]"></a>Timebase_DownCounter_SS_Get_Period_Flag</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, timebase.o(.text.Timebase_DownCounter_SS_Get_Period_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Timebase_DownCounter_SS_Get_Period_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Period_Value_Expired
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Period_Value_Securely
</UL>

<P><STRONG><a name="[bb]"></a>Timebase_DownCounter_SS_Get_Remaining_Period_Value</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, timebase.o(.text.Timebase_DownCounter_SS_Get_Remaining_Period_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Timebase_DownCounter_SS_Get_Remaining_Period_Value &rArr; Timebase_DownCounter_SS_Get_PeriodValue
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Get_PeriodValue
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Get_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Period_Value_Expired
</UL>

<P><STRONG><a name="[ba]"></a>Timebase_DownCounter_SS_Get_Status</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, timebase.o(.text.Timebase_DownCounter_SS_Get_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Timebase_DownCounter_SS_Get_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Start
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Securely
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Expired_Event
</UL>

<P><STRONG><a name="[bc]"></a>Timebase_DownCounter_SS_Get_Value</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, timebase.o(.text.Timebase_DownCounter_SS_Get_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Timebase_DownCounter_SS_Get_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Get_Remaining_Period_Value
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Period_Value_Securely
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update
</UL>

<P><STRONG><a name="[be]"></a>Timebase_DownCounter_SS_Period_Value_Expired</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_DownCounter_SS_Period_Value_Expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Timebase_DownCounter_SS_Period_Value_Expired &rArr; Timebase_DownCounter_SS_Get_Remaining_Period_Value &rArr; Timebase_DownCounter_SS_Get_PeriodValue
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Get_Remaining_Period_Value
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Get_Period_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Period_Value_Expired_Event
</UL>

<P><STRONG><a name="[c0]"></a>Timebase_DownCounter_SS_Period_Value_Expired_Event</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_DownCounter_SS_Period_Value_Expired_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Timebase_DownCounter_SS_Period_Value_Expired_Event &rArr; Timebase_DownCounter_SS_Period_Value_Expired &rArr; Timebase_DownCounter_SS_Get_Remaining_Period_Value &rArr; Timebase_DownCounter_SS_Get_PeriodValue
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Period_Value_Expired
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Clear_Period_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_DeLED_Control
</UL>

<P><STRONG><a name="[b9]"></a>Timebase_DownCounter_SS_Reset</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, timebase.o(.text.Timebase_DownCounter_SS_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Timebase_DownCounter_SS_Reset &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Clear_Period_Flag
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_EndValueSubSec
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_EndValueSec
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Value
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Reset_All
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Clear_All_Flags
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Forcefully
</UL>

<P><STRONG><a name="[c6]"></a>Timebase_DownCounter_SS_Reset_All</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_DownCounter_SS_Reset_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Timebase_DownCounter_SS_Reset_All &rArr; Timebase_DownCounter_SS_Reset &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Reset
</UL>

<P><STRONG><a name="[c3]"></a>Timebase_DownCounter_SS_Set_EndValueSec</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timebase.o(.text.Timebase_DownCounter_SS_Set_EndValueSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timebase_DownCounter_SS_Set_EndValueSec
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Reset
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Securely
</UL>

<P><STRONG><a name="[c2]"></a>Timebase_DownCounter_SS_Set_EndValueSubSec</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timebase.o(.text.Timebase_DownCounter_SS_Set_EndValueSubSec))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timebase_DownCounter_SS_Set_EndValueSubSec
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Reset
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Securely
</UL>

<P><STRONG><a name="[3b]"></a>Timebase_DownCounter_SS_Set_Forcefully</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, timebase.o(.text.Timebase_DownCounter_SS_Set_Forcefully))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Timebase_DownCounter_SS_Set_Forcefully &rArr; Timebase_DownCounter_SS_Set_Securely &rArr; Timebase_DownCounter_SS_Start &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Reset
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Securely
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Handler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>Timebase_DownCounter_SS_Set_PeriodValue</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, timebase.o(.text.Timebase_DownCounter_SS_Set_PeriodValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timebase_DownCounter_SS_Set_PeriodValue
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Period_Value_Securely
</UL>

<P><STRONG><a name="[c9]"></a>Timebase_DownCounter_SS_Set_Period_Flag</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, timebase.o(.text.Timebase_DownCounter_SS_Set_Period_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Timebase_DownCounter_SS_Set_Period_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Period_Value_Securely
</UL>

<P><STRONG><a name="[c7]"></a>Timebase_DownCounter_SS_Set_Period_Value_Securely</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, timebase.o(.text.Timebase_DownCounter_SS_Set_Period_Value_Securely))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timebase_DownCounter_SS_Set_Period_Value_Securely &rArr; Timebase_DownCounter_SS_Set_PeriodValue
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Period_Flag
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Get_Period_Flag
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_PeriodValue
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Get_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_DeLED_Control
</UL>

<P><STRONG><a name="[72]"></a>Timebase_DownCounter_SS_Set_Securely</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, timebase.o(.text.Timebase_DownCounter_SS_Set_Securely))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Timebase_DownCounter_SS_Set_Securely &rArr; Timebase_DownCounter_SS_Start &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Start
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_EndValueSubSec
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_EndValueSec
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Value
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Get_Status
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Get_SubSeconds
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Get_Seconds
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_Rotation
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Config_Rotation
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_Rotation_Init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Forcefully
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_DeLED_Control
</UL>

<P><STRONG><a name="[c5]"></a>Timebase_DownCounter_SS_Set_Status</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, timebase.o(.text.Timebase_DownCounter_SS_Set_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Start
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Reset
</UL>

<P><STRONG><a name="[c4]"></a>Timebase_DownCounter_SS_Set_Value</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timebase.o(.text.Timebase_DownCounter_SS_Set_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timebase_DownCounter_SS_Set_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Reset
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Securely
</UL>

<P><STRONG><a name="[cd]"></a>Timebase_DownCounter_SS_Start</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_DownCounter_SS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Timebase_DownCounter_SS_Start &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Status
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Get_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Securely
</UL>

<P><STRONG><a name="[ce]"></a>Timebase_DownCounter_SS_Update</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, timebase.o(.text.Timebase_DownCounter_SS_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Timebase_DownCounter_SS_Update &rArr; Timebase_DownCounter_SS_Reset &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Reset
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_EndValueSubSec
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_EndValueSec
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Get_EndValueSubSec
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Get_EndValueSec
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Value
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Get_Value
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Status
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Get_Status
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Get_SubSeconds
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Get_Seconds
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update_All
</UL>

<P><STRONG><a name="[d1]"></a>Timebase_DownCounter_SS_Update_All</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_DownCounter_SS_Update_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Timebase_DownCounter_SS_Update_All &rArr; Timebase_DownCounter_SS_Update &rArr; Timebase_DownCounter_SS_Reset &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Main_Loop_Executables
</UL>

<P><STRONG><a name="[b3]"></a>Timebase_DownCounter_Set_EndValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timebase.o(.text.Timebase_DownCounter_Set_EndValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timebase_DownCounter_Set_EndValue
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Update
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_Securely
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Reset
</UL>

<P><STRONG><a name="[d2]"></a>Timebase_DownCounter_Set_Securely</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, timebase.o(.text.Timebase_DownCounter_Set_Securely))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Timebase_DownCounter_Set_Securely &rArr; Timebase_DownCounter_Start &rArr; Timebase_DownCounter_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Start
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_EndValue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_Value
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Get_Status
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Get_Seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Send_Filter_Status
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_Valve_Control
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Gpio_Init
</UL>

<P><STRONG><a name="[b5]"></a>Timebase_DownCounter_Set_Status</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, timebase.o(.text.Timebase_DownCounter_Set_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Timebase_DownCounter_Set_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Update
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Start
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Reset
</UL>

<P><STRONG><a name="[b4]"></a>Timebase_DownCounter_Set_Value</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timebase.o(.text.Timebase_DownCounter_Set_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timebase_DownCounter_Set_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Update
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_Securely
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Reset
</UL>

<P><STRONG><a name="[d3]"></a>Timebase_DownCounter_Start</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_DownCounter_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Timebase_DownCounter_Start &rArr; Timebase_DownCounter_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_Status
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Get_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_Securely
</UL>

<P><STRONG><a name="[d4]"></a>Timebase_DownCounter_Update</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, timebase.o(.text.Timebase_DownCounter_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Timebase_DownCounter_Update &rArr; Timebase_DownCounter_Reset &rArr; Timebase_DownCounter_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Reset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_EndValue
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Get_EndValue
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_Value
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Get_Value
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_Status
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Get_Status
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Get_Seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Update_All
</UL>

<P><STRONG><a name="[d7]"></a>Timebase_DownCounter_Update_All</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_DownCounter_Update_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Timebase_DownCounter_Update_All &rArr; Timebase_DownCounter_Update &rArr; Timebase_DownCounter_Reset &rArr; Timebase_DownCounter_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Main_Loop_Executables
</UL>

<P><STRONG><a name="[ae]"></a>Timebase_ISR_Executables</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, timebase.o(.text.Timebase_ISR_Executables))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timebase_ISR_Executables
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[d8]"></a>Timebase_Init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Timebase_Init &rArr; Timebase_Reset &rArr; Timebase_DownCounter_Reset_All &rArr; Timebase_DownCounter_Reset &rArr; Timebase_DownCounter_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Reset
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Config
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Struct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>Timebase_Main_Loop_Executables</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, timebase.o(.text.Timebase_Main_Loop_Executables))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Timebase_Main_Loop_Executables &rArr; Timebase_DownCounter_SS_Update_All &rArr; Timebase_DownCounter_SS_Update &rArr; Timebase_DownCounter_SS_Reset &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Update_All
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update_All
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Sync_With_Shadow_Variables
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>Timebase_Reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timebase.o(.text.Timebase_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Timebase_Reset &rArr; Timebase_DownCounter_Reset_All &rArr; Timebase_DownCounter_Reset &rArr; Timebase_DownCounter_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Reset_All
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Reset_All
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Init
</UL>

<P><STRONG><a name="[d9]"></a>Timebase_Struct_Init</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, timebase.o(.text.Timebase_Struct_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timebase_Struct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Init
</UL>

<P><STRONG><a name="[da]"></a>Timebase_Timer_Config</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, timebase.o(.text.Timebase_Timer_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Timebase_Timer_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Init
</UL>

<P><STRONG><a name="[a2]"></a>Timebase_Timer_Delay_SubSeconds</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, timebase.o(.text.Timebase_Timer_Delay_SubSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Timebase_Timer_Delay_SubSeconds
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Get_SecondsShadow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Get_SubSecondsShadow
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Atomic_Operation_End
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Atomic_Operation_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NTC_Sensor_ADC_Init
</UL>

<P><STRONG><a name="[cb]"></a>Timebase_Timer_Get_Seconds</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timebase.o(.text.Timebase_Timer_Get_Seconds))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Update
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_Securely
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Securely
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>Timebase_Timer_Get_SecondsShadow</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timebase.o(.text.Timebase_Timer_Get_SecondsShadow))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Delay_SubSeconds
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Window_Timer_Start
</UL>

<P><STRONG><a name="[ca]"></a>Timebase_Timer_Get_SubSeconds</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timebase.o(.text.Timebase_Timer_Get_SubSeconds))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Update
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Securely
</UL>

<P><STRONG><a name="[e1]"></a>Timebase_Timer_Get_SubSecondsShadow</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, timebase.o(.text.Timebase_Timer_Get_SubSecondsShadow))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Delay_SubSeconds
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Window_Timer_Start
</UL>

<P><STRONG><a name="[dd]"></a>Timebase_Timer_Sync_With_Shadow_Variables</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_Timer_Sync_With_Shadow_Variables))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timebase_Timer_Sync_With_Shadow_Variables
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Atomic_Operation_End
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Atomic_Operation_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Main_Loop_Executables
</UL>

<P><STRONG><a name="[e4]"></a>Timebase_Window_Timer_Start</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, timebase.o(.text.Timebase_Window_Timer_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Timebase_Window_Timer_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Get_SecondsShadow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Get_SubSecondsShadow
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Atomic_Operation_End
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Atomic_Operation_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>UART_Clock_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(.text.UART_Clock_Init))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[e5]"></a>UART_Determine_Digit_Numbers</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, uart.o(.text.UART_Determine_Digit_Numbers))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_Determine_Digit_Numbers
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Number
</UL>

<P><STRONG><a name="[e8]"></a>UART_GPIO_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, uart.o(.text.UART_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[e7]"></a>UART_Init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uart.o(.text.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_Init &rArr; UART_Set_BAUD_Rate
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TX_Config
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Set_BAUD_Rate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Clock_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>UART_PrintfD_NL</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uart.o(.text.UART_PrintfD_NL))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_PrintfD_NL &rArr; UART_Transmit_Number &rArr; UART_Determine_Digit_Numbers
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Number
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Text
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Master_Rec_Data
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Print_Heartbeat_Send_Data
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Debug_Data
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Debug_Data
</UL>

<P><STRONG><a name="[a9]"></a>UART_PrintfNL</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, uart.o(.text.UART_PrintfNL))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART_PrintfNL &rArr; UART_Transmit_Text &rArr; UART_Transmit_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Text
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_All_Debug_Data
</UL>

<P><STRONG><a name="[ea]"></a>UART_Set_BAUD_Rate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uart.o(.text.UART_Set_BAUD_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Set_BAUD_Rate
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[eb]"></a>UART_TX_Config</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, uart.o(.text.UART_TX_Config))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[ee]"></a>UART_Transmit_Byte</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, uart.o(.text.UART_Transmit_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_Transmit_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Number_Digits
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Number
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Text
</UL>

<P><STRONG><a name="[ed]"></a>UART_Transmit_Number</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uart.o(.text.UART_Transmit_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_Transmit_Number &rArr; UART_Determine_Digit_Numbers
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Number_Digits
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Determine_Digit_Numbers
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PrintfD_NL
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>UART_Transmit_Number_Digits</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, uart.o(.text.UART_Transmit_Number_Digits))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_Transmit_Number_Digits &rArr; UART_Transmit_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Number
</UL>

<P><STRONG><a name="[ec]"></a>UART_Transmit_Text</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, uart.o(.text.UART_Transmit_Text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_Transmit_Text &rArr; UART_Transmit_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PrintfNL
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PrintfD_NL
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>USART1_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, disp.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Counter_Reset
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Timer_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>User_Config_Configure_Window_Feedback</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, user_config.o(.text.User_Config_Configure_Window_Feedback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = User_Config_Configure_Window_Feedback &rArr; Disp_Comm_Heartbeat_Set_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Heartbeat_Set_Data
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Ice_Maker_Handler
</UL>

<P><STRONG><a name="[f3]"></a>User_Config_Disp_Ice_Maker_Ice_Tray_Rotation</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, user_config.o(.text.User_Config_Disp_Ice_Maker_Ice_Tray_Rotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = User_Config_Disp_Ice_Maker_Ice_Tray_Rotation &rArr; Ice_Maker_Config_Rotation &rArr; Timebase_DownCounter_SS_Set_Securely &rArr; Timebase_DownCounter_SS_Start &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_IceMaker
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Heartbeat_Set_Data
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_Mode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Valve_on_User_Config
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_On_Operation
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_On_Config_Rotation
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Config_Rotation
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Reset_All_Parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Ice_Maker_Handler
</UL>

<P><STRONG><a name="[f5]"></a>User_Config_Disp_Ice_Maker_Valve_On_Off</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, user_config.o(.text.User_Config_Disp_Ice_Maker_Valve_On_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = User_Config_Disp_Ice_Maker_Valve_On_Off &rArr; Disp_Comm_Heartbeat_Set_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_IceMaker
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Heartbeat_Set_Data
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_Mode
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_On_Operation
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_On_Config_Rotation
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Valve_Off
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Valve_On
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Ice_Maker_Handler
</UL>

<P><STRONG><a name="[77]"></a>User_Config_Ice_Maker_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, user_config.o(.text.User_Config_Ice_Maker_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = User_Config_Ice_Maker_Handler &rArr; User_Config_Disp_Ice_Maker_Ice_Tray_Rotation &rArr; Ice_Maker_Config_Rotation &rArr; Timebase_DownCounter_SS_Set_Securely &rArr; Timebase_DownCounter_SS_Start &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Configure_Window_Feedback
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Disp_Ice_Maker_Valve_On_Off
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Send_IM_Motor_Feedback
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Disp_Ice_Maker_Ice_Tray_Rotation
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Disp_Comm_Based_Ice_Maker_Handler
</UL>

<P><STRONG><a name="[f6]"></a>User_Config_Send_IM_Motor_Feedback</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, user_config.o(.text.User_Config_Send_IM_Motor_Feedback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = User_Config_Send_IM_Motor_Feedback &rArr; Disp_Comm_Heartbeat_Set_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Heartbeat_Set_Data
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_On_Operation
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Tray_On_Config_Rotation
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Ice_Maker_Handler
</UL>

<P><STRONG><a name="[8c]"></a>User_Config_User_In_Configuration_Mode</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, user_config.o(.text.User_Config_User_In_Configuration_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = User_Config_User_In_Configuration_Mode &rArr; User_Config_User_in_Configuration_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Valve_on_User_Config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_User_in_Configuration_Window
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Config_Ice_Tray_on_User_Config_Rotation
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Making_Operation
</UL>

<P><STRONG><a name="[f8]"></a>User_Config_User_in_Configuration_Window</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, user_config.o(.text.User_Config_User_in_Configuration_Window))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = User_Config_User_in_Configuration_Window
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_User_In_Configuration_Mode
</UL>

<P><STRONG><a name="[8b]"></a>User_Config_Valve_on_User_Config</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, user_config.o(.text.User_Config_Valve_on_User_Config))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_User_In_Configuration_Mode
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Ice_Making_Operation
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_Config_Disp_Ice_Maker_Ice_Tray_Rotation
</UL>

<P><STRONG><a name="[f9]"></a>Water_Dispenser_AC_And_DC_Valve_Off</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, water_dispenser.o(.text.Water_Dispenser_AC_And_DC_Valve_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Water_Dispenser_AC_And_DC_Valve_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_AC_Valve_Off
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_DC_Valve_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_Valve_Control
</UL>

<P><STRONG><a name="[fc]"></a>Water_Dispenser_AC_And_DC_Valve_On</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, water_dispenser.o(.text.Water_Dispenser_AC_And_DC_Valve_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Water_Dispenser_AC_And_DC_Valve_On
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_AC_Valve_On
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_DC_Valve_On
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_Valve_Control
</UL>

<P><STRONG><a name="[fa]"></a>Water_Dispenser_AC_Valve_Off</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, water_dispenser.o(.text.Water_Dispenser_AC_Valve_Off))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_AC_And_DC_Valve_Off
</UL>

<P><STRONG><a name="[fd]"></a>Water_Dispenser_AC_Valve_On</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, water_dispenser.o(.text.Water_Dispenser_AC_Valve_On))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_AC_And_DC_Valve_On
</UL>

<P><STRONG><a name="[fb]"></a>Water_Dispenser_DC_Valve_Off</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, water_dispenser.o(.text.Water_Dispenser_DC_Valve_Off))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_AC_And_DC_Valve_Off
</UL>

<P><STRONG><a name="[fe]"></a>Water_Dispenser_DC_Valve_On</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, water_dispenser.o(.text.Water_Dispenser_DC_Valve_On))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_AC_And_DC_Valve_On
</UL>

<P><STRONG><a name="[101]"></a>Water_Dispenser_DeLED_High</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, water_dispenser.o(.text.Water_Dispenser_DeLED_High))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_DeLED_Control
</UL>

<P><STRONG><a name="[102]"></a>Water_Dispenser_DeLED_Low</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, water_dispenser.o(.text.Water_Dispenser_DeLED_Low))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_DeLED_Control
</UL>

<P><STRONG><a name="[103]"></a>Water_Dispenser_DeLED_Toggle</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, water_dispenser.o(.text.Water_Dispenser_DeLED_Toggle))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_DeLED_Control
</UL>

<P><STRONG><a name="[a8]"></a>Water_Dispenser_Debug_Data</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, water_dispenser.o(.text.Water_Dispenser_Debug_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Water_Dispenser_Debug_Data &rArr; UART_PrintfD_NL &rArr; UART_Transmit_Number &rArr; UART_Determine_Digit_Numbers
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Inc_Curr_Thread
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Inc_Thread_Function
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Get_Curr_Thread
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Get_Thread_Function
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Get_Start_Flag
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PrintfD_NL
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Lever_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_All_Debug_Data
</UL>

<P><STRONG><a name="[100]"></a>Water_Dispenser_Disp_Based_DeLED_Control</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, water_dispenser.o(.text.Water_Dispenser_Disp_Based_DeLED_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Water_Dispenser_Disp_Based_DeLED_Control &rArr; Timebase_DownCounter_SS_Set_Securely &rArr; Timebase_DownCounter_SS_Start &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Period_Value_Expired_Event
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Period_Value_Securely
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Heartbeat_Set_Data
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_Mode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Securely
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Expired_Event
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_DeLED_Toggle
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_DeLED_Low
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_DeLED_High
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Lever_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Handler
</UL>

<P><STRONG><a name="[104]"></a>Water_Dispenser_Disp_Based_Valve_Control</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, water_dispenser.o(.text.Water_Dispenser_Disp_Based_Valve_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Water_Dispenser_Disp_Based_Valve_Control &rArr; Timebase_DownCounter_Expired_Event &rArr; Timebase_DownCounter_Clear_All_Flags &rArr; Timebase_DownCounter_Reset &rArr; Timebase_DownCounter_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Expired_Event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_Securely
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Clear_All_Flags
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Heartbeat_Set_Data
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_Mode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_WATER_DISPENSER_LOW_WATER_FILL_TIME_SEC
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_WATER_DISPENSER_MID_WATER_FILL_TIME_SEC
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Water_Level_Selection
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Command
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Reset_Water_Level_Selection
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_AC_And_DC_Valve_Off
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_AC_And_DC_Valve_On
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Lever_Input
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Handler
</UL>

<P><STRONG><a name="[106]"></a>Water_Dispenser_Disp_Command</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, water_dispenser.o(.text.Water_Dispenser_Disp_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Water_Dispenser_Disp_Command
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_Mode
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_Valve_Control
</UL>

<P><STRONG><a name="[10a]"></a>Water_Dispenser_Gpio_Init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, water_dispenser.o(.text.Water_Dispenser_Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Water_Dispenser_Gpio_Init &rArr; Timebase_DownCounter_Set_Securely &rArr; Timebase_DownCounter_Start &rArr; Timebase_DownCounter_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_Securely
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Init
</UL>

<P><STRONG><a name="[10b]"></a>Water_Dispenser_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, water_dispenser.o(.text.Water_Dispenser_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Water_Dispenser_Handler &rArr; Water_Dispenser_Send_Filter_Status &rArr; Timebase_DownCounter_Expired_Event &rArr; Timebase_DownCounter_Clear_All_Flags &rArr; Timebase_DownCounter_Reset &rArr; Timebase_DownCounter_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Send_Filter_Status
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_Valve_Control
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_DeLED_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10d]"></a>Water_Dispenser_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, water_dispenser.o(.text.Water_Dispenser_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Water_Dispenser_Init &rArr; Water_Dispenser_Gpio_Init &rArr; Timebase_DownCounter_Set_Securely &rArr; Timebase_DownCounter_Start &rArr; Timebase_DownCounter_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Variable_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>Water_Dispenser_Lever_Input</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, water_dispenser.o(.text.Water_Dispenser_Lever_Input))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Debug_Data
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_Valve_Control
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_DeLED_Control
</UL>

<P><STRONG><a name="[10f]"></a>Water_Dispenser_Lever_Input_Rising_Edge</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, water_dispenser.o(.text.Water_Dispenser_Lever_Input_Rising_Edge))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Water_Level_Selection
</UL>

<P><STRONG><a name="[110]"></a>Water_Dispenser_Lever_Input_Rising_Edge_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, water_dispenser.o(.text.Water_Dispenser_Lever_Input_Rising_Edge_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Water_Level_Selection
</UL>

<P><STRONG><a name="[108]"></a>Water_Dispenser_Reset_Water_Level_Selection</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, water_dispenser.o(.text.Water_Dispenser_Reset_Water_Level_Selection))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_Valve_Control
</UL>

<P><STRONG><a name="[10c]"></a>Water_Dispenser_Send_Filter_Status</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, water_dispenser.o(.text.Water_Dispenser_Send_Filter_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Water_Dispenser_Send_Filter_Status &rArr; Timebase_DownCounter_Expired_Event &rArr; Timebase_DownCounter_Clear_All_Flags &rArr; Timebase_DownCounter_Reset &rArr; Timebase_DownCounter_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Expired_Event
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Set_Securely
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_Clear_All_Flags
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Heartbeat_Set_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Handler
</UL>

<P><STRONG><a name="[10e]"></a>Water_Dispenser_Variable_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, water_dispenser.o(.text.Water_Dispenser_Variable_Init))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Init
</UL>

<P><STRONG><a name="[105]"></a>Water_Dispenser_Water_Level_Selection</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, water_dispenser.o(.text.Water_Dispenser_Water_Level_Selection))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Water_Dispenser_Water_Level_Selection &rArr; Disp_Comm_Heartbeat_Set_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_WaterDispenser
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Heartbeat_Set_Data
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Master_Data_Get_Mode
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Lever_Input_Rising_Edge_Reset
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Lever_Input_Rising_Edge
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Disp_Based_Valve_Control
</UL>

<P><STRONG><a name="[2d]"></a>main</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = main &rArr; Ice_Maker_Disp_Comm_Based_Ice_Maker_Handler &rArr; Ice_Maker_Disp_Comm_Based_Ice_Maker_Mode &rArr; Ice_Maker_Ice_Making_Operation &rArr; Ice_Maker_Ice_Tray_Rotation_Init &rArr; Timebase_DownCounter_SS_Set_Securely &rArr; Timebase_DownCounter_SS_Start &rArr; Timebase_DownCounter_SS_Set_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Main_Loop_Executables
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Window_Timer_Start
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_All_Debug_Data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GlobalVars_Set_Start_Flag
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Number
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Get_Seconds
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_Text
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Expired_Event
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Handler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Disp_Comm_Based_Ice_Maker_Handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_DownCounter_SS_Set_Forcefully
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Water_Dispenser_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_Comm_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ice_Maker_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_Init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[111]"></a>timer_Init</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, timer.o(.text.timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer_Init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[113]"></a>__NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, timer.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_Init
</UL>

<P><STRONG><a name="[114]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, timer.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_Init
</UL>

<P><STRONG><a name="[68]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, disp.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Timer_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_RX_Int_Config
</UL>

<P><STRONG><a name="[69]"></a>__NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, disp.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_Timer_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_UART_RX_Int_Config
</UL>

<P><STRONG><a name="[de]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, timebase.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Config
</UL>

<P><STRONG><a name="[df]"></a>__NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, timebase.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timebase_Timer_Config
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[34]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
